<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用是对sql进行分类化管理，理解为sql隔离
    注意：使用mapper代理方法开发，namespace由特殊重要的作用-->
<mapper namespace="com.xxy.mybatis.mapper.OrdersMapperCustom">
<!--订单查询关联查询用户的resultMap
	将整个查询的结果映射到com.xxy.mybatis.po.Orders中-->
	<resultMap id="OrdersUserResultMap" type="com.xxy.mybatis.po.Orders">

	<!--配置映射的订单信息-->
		<!--指定查询列的唯一标识,订单信息的唯一标识,如果有多个列组成为唯一标识,需要配置多个id
			column:订单信息的唯一标识列
			property:订单信息的唯一标识列所映射到Orders中哪个属性-->
		<id column="id" property="id"></id>
		<result column="user_id" property="userId"></result>
		<result column="number" property="number"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
	<!--配置映射的关联的用户信息
		association:用于映射关系查询单个对象信息
		property:要将关联查询的用户信息映射到Orders中哪个属性-->
		<association property="user" javaType="com.xxy.mybatis.po.User">
			<id column="user_id" property="id"></id>
			<result column="username" property="username"></result>
			<result column="sex" property="sex"></result>
			<result column="address" property="address"></result>
		</association>
	</resultMap>
<!--查询订单及订单明细的resultMap
	使用extends继承，不用配置订单信息和用户信息映射-->
	<resultMap id="OrdersAndOrderDetailResultMap" type="com.xxy.mybatis.po.Orders" extends="OrdersUserResultMap">
<!--订单信息-->
<!--用户信息-->
<!--订单明细信息
	一个订单对应多个明细，要是用collection进行映射
	collection:对关联查询到的多条记录映射到集合对象中
	property:将关联查询到的多条记录映射到orders中的哪个属性
	ofType:指定集合属性（List）中的pojo类型-->
	<collection property="orderdetails" ofType="com.xxy.mybatis.po.Orderdetail">
<!--id:订单明细的唯一标识
	property:要映射到Orderdetail中哪个属性-->
		<id column="orderdetail_id" property="id"></id>
		<result column="items_id" property="items_id"></result>
		<result column="items_num" property="items_num"></result>
		<result column="orders_id" property="orders_id"></result>
	</collection>
	</resultMap>
<!--查询用户及购买的商品-->
	<!--用户信息-->
	<resultMap id="UserAndItemsResultMap" type="com.xxy.mybatis.po.User">
		<id column="user_id" property="id"></id>
		<result column="username" property="username"></result>
		<result column="sex" property="sex"></result>
		<result column="address" property="address"></result>
		<!--订单信息
    一个用户对应多个订单，使用collection映射-->
		<collection property="ordersList" ofType="com.xxy.mybatis.po.Orders">
			<id column="id" property="id"></id>
			<result column="user_id" property="userId"></result>
			<result column="number" property="number"></result>
			<result column="createtime" property="createtime"></result>
			<result column="note" property="note"></result>
			<collection property="orderdetails" ofType="com.xxy.mybatis.po.Orderdetail">
				<id column="orderdetail_id" property="id"></id>
				<result column="items_id" property="items_id"></result>
				<result column="items_num" property="items_num"></result>
				<result column="orders_id" property="orders_id"></result>
				<!--商品信息
            一个订单对应一个商品-->
				<association property="items" javaType="com.xxy.mybatis.po.Items">
					<id column="items_id" property="id"></id>
					<result column="items_name" property="name"></result>
					<result column="items_price" property="price"></result>
					<result column="items_detail" property="detail"></result>
				</association>
			</collection>
		</collection>
	</resultMap>

<!--查询订单关联查询用户信息，使用resultType-->
    <select id="findOrdersUser" resultType="com.xxy.mybatis.po.OrdersCustom">
       select
	orders.*,
	user.username,
	user.sex,
	user.address
	from
		orders,user
	where orders.user_id=user.id
    </select>
	<!--查询订单关联查询用户信息,使用resultMap-->
	<select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
       select
	orders.*,
	user.username,
	user.sex,
	user.address
	from
		orders,user
	where orders.user_id=user.id
    </select>
	<!--查询订单及订单明细,使用resultMap-->
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
     	SELECT
		orders.*,
	user.username,
	user.sex,
	user.address,
	orderdetail.items_id,
	orderdetail.items_num,
	orderdetail.orders_id
	FROM
		orders,
		user,
		orderdetail
	WHERE orders.user_id = user.id AND orderdetail.orders_id = orders.id
    </select>
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
     	SELECT
	orders.*,
user.username,
user.sex,
user.address,
orderdetail.id orderdetail_id,
orderdetail.items_id,
orderdetail.items_num,
orderdetail.orders_id,
items.name items_name,
items.price items_price,
items.detail items_detail
FROM
	orders,
	user,
	orderdetail,
	items
WHERE orders.user_id = user.id AND orderdetail.orders_id = orders.id AND orderdetail.items_id = items.id

    </select>
<!--延迟加载的resultMap-->
	<resultMap id="OrdersUserLazyLoadingResultMap" type="com.xxy.mybatis.po.Orders">
	<!--对订单信息进行映射配置-->
		<id column="id" property="id"></id>
		<result column="user_id" property="userId"></result>
		<result column="number" property="number"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
	<!--实现用户信息进行延迟加载
		select:指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
		要使用userMapper.xml中findUserById完成根据用户id（user_id）用户信息的查询，如果findUserById不在本mapper中，需要在前边加namespace
		columen:订单信息中关联用户信息查询的列（是user_id）-->
		<association property="user" javaType="com.xxy.mybatis.po.User" select="com.xxy.mybatis.mapper.UserMapper.findUserById" column="user_id">

		</association>
	</resultMap>
<!--查询订单关联查询用户，用户信息需要延迟加载-->
	<select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
		select * from orders
	</select>
</mapper>
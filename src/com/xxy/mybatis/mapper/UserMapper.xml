<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用是对sql进行分类化管理，理解为sql隔离
    注意：使用mapper代理方法开发，namespace由特殊重要的作用-->
<mapper namespace="com.xxy.mybatis.mapper.UserMapper">
<!--开启本mapper下的namespace下的二级缓存-->
    <cache></cache>
<!--定义sql片段
    id:ql片段的唯一标识
    经验：定义sql片段是基于单表，这样sql片段可重用性才高
         在sql片段中不要包括where-->
    <sql id="query_user_where">
            <if test="userCustom!=null">
                <if test="userCustom.sex!=null and userCustom.sex!=''">
                    AND user.sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    AND user.username LIKE '%${userCustom.username}%'
                </if>
                <if test="ids!=null">
                    <!--使用foreach便遍历传入ids
                        collection:指定输入对象的集合属性
                        item:每次遍历生成对象串
                        open:开始遍历时拼接的串
                        close:结束遍历时拼接的串
                        separator:遍历的两个对象中需要拼接的串
                        实现下面的sql拼接：
                        AND (id=1 OR id=6 OR id=7)-->
                    <foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
                        <!--每个遍历需要拼接的串-->
                        id=#{user_id}
                    </foreach>
                </if>
            </if>
    </sql>
<!--定义resultMap
    将SELECT id id_,username username_ FROM user和user中的属性做一个映射关系
    type:resultMap最终映射的Java对象类型，可以使用别名
    id:对resultMap的唯一标识-->
    <resultMap id="userResultMap" type="user">
    <!--id标识查询结果中的唯一标识
        column:查询出来的列名
        property：type所指定的pojo的属性名
        最终resultMap对column和property做一个映射关系（对应关系）
    -->
        <id column="id_" property="id"></id>
        <result column="username_" property="username"></result>
    </resultMap>
<!--用户信息的综合查询
    #{userCustom.sex}:去取pojo包装对象中性别值
    ${userCustom.username}：去取pojo包装对象中用户名称-->
    <select id="findUserList" parameterType="com.xxy.mybatis.po.UserQueryVo" resultType="com.xxy.mybatis.po.UserCustom">
        SELECT * FROM user
        <!--where可以自动的去掉条件的第一个and-->
       <where>
        <!--引用sql片段的id,如果refid指定的id不在本mapper文件中，需要前边加namespace-->
        <include refid="query_user_where"></include>
           <!--在这里还要引用其他sql片段-->
       </where>
    </select>
<!--用户信息综合查询总数
    parameterType:指定输入类型和findUserList一样
    resultType:输出结果类型-->
    <select id="findUserCount" parameterType="com.xxy.mybatis.po.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        <!--where可以自动的去掉条件的第一个and-->
        <where>
            <!--引用sql片段的id,如果refid指定的id不在本mapper文件中，需要前边加namespace-->
            <include refid="query_user_where"></include>
            <!--在这里还要引用其他sql片段-->
        </where>
    </select>

    <!--在映射文件中配置很多sql语句-->
    <!--通过select执行数据库查询
        id：标识映射文件中的sql
        将sql语句封装到mappedStatement对象中，所以id称为statement的id
        parameterType:指定输入参数的类型，这里指定int型
        #{}表示一个占位符号
        #{id}:其中的id标识接收输入的参数，参数名称就是id，如果输入参数为简单类型，#{}中的参数可以任意，可以是value或其他。
        resultType:知道sql输出结果所映射的java对象类型，select指定resultType标识单条记录映射成的Java对象。
    -->
    <select id="findUserById" parameterType="int" resultType="user" useCache="false">
        SELECT * FROM USER WHERE id=#{value}
    </select>
<!--使用resultMap进行输出映射
    resultMap:指定定义的resultMap的id，如果这个resultMap在其他的mapper文件中，前边需要加namespace-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM user WHERE id= #{value}
    </select>
    <!--根据用户名称进行模糊查询，可能返回多条记录
    resultType：指定是单条记录所映射的java对象类型
    ${}标识拼接sql串，将接收到的参数内容不加任何修饰拼接在sql中
    使用${}拼接sql可能受到sql注入
    ${value}:接受输入参数内容，如果类型为简单类型，${}只能使用value-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.xxy.mybatis.po.User">
        SELECT * FROM USER WHERE username LIKE '%${value}%'
    </select>
    <!--添加用户
    parameterType:指定输入参数为pojo（包括用户信息）
    #{}中指定pojo的属性名，接收pojo对象的属性值,mybatis通过OGNL获取对象的属性值-->
    <insert id="insertUser" parameterType="com.xxy.mybatis.po.User">
        <!--将插入数据的主键返回到user对象中
        SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键
        keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
        order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
        resultType:指定SELECT LAST_INSERT_ID()的结果类型-->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
           SELECT LAST_INSERT_ID()
        </selectKey>
        <!--使用mysql的uuid()生成主键
        执行过程：
            首先通过uuid()得到主键将主键设置到user对象的id属性中
            其次在insert执行时从user对象中去除id属性值-->
<!--        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
<!--            SELECT uuid()-->
<!--        </selectKey>-->
<!--        INSERT  INTO  USER(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address})-->
        INSERT  INTO  USER(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--根据id删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id=#{id}
    </delete>
    <!--根据id更新用户
    需要传入用户id和更新信息
    parameterType指定user对象，包括id和更新信息，注意：id必须存在
    #{id}：从输入user对象中获取id属性值-->
    <update id="updateUser" parameterType="com.xxy.mybatis.po.User">
        UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
    </update>


</mapper>